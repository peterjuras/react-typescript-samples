/* */ 
var ts = require('typescript');
var logger_1 = require('./logger');
var utils_1 = require("./utils");
var logger = new logger_1.default({ debug: false });
var Transpiler = (function () {
    function Transpiler(host) {
        this._host = host;
        this._options = Object.assign({}, this._host.options);
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = this._options.inlineSourceMap;
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = true;
        this._options.inlineSourceMap = false;
        this._options.declaration = false;
        this._options.isolatedModules = true;
        this._options.module = ts.ModuleKind.System;
    }
    Transpiler.prototype.transpile = function (sourceName, source) {
        logger.debug("transpiling " + sourceName);
        var sourceFile = this._host.addFile(sourceName, source);
        var program = ts.createProgram([sourceName], this._options, this._host);
        var jstext = undefined;
        var maptext = undefined;
        var emitResult = program.emit(undefined, function (outputName, output) {
            if (utils_1.isJavaScript(outputName))
                jstext = output.slice(0, output.lastIndexOf("//#"));
            else if (utils_1.isSourceMap(outputName))
                maptext = output;
            else
                throw new Error("unexpected ouput file " + outputName);
        });
        var diagnostics = program.getSyntacticDiagnostics().concat(emitResult.diagnostics);
        return {
            failure: this.hasError(diagnostics),
            errors: diagnostics,
            js: jstext,
            sourceMap: maptext
        };
    };
    Transpiler.prototype.hasError = function (diags) {
        return diags.some(function (diag) { return (diag.category === ts.DiagnosticCategory.Error); });
    };
    return Transpiler;
})();
exports.Transpiler = Transpiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwaWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc3BpbGVyLnRzIl0sIm5hbWVzIjpbIlRyYW5zcGlsZXIiLCJUcmFuc3BpbGVyLmNvbnN0cnVjdG9yIiwiVHJhbnNwaWxlci50cmFuc3BpbGUiLCJUcmFuc3BpbGVyLmhhc0Vycm9yIl0sIm1hcHBpbmdzIjoiQUFDQSxJQUFZLEVBQUUsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUVqQyx1QkFBbUIsVUFBVSxDQUFDLENBQUE7QUFDOUIsc0JBQXdDLFNBQVMsQ0FBQyxDQUFBO0FBRWxELElBQUksTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBUzFDO0lBSUNBLG9CQUFZQSxJQUFrQkE7UUFDN0JDLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBRWxCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUV0REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsS0FBS0EsU0FBU0EsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLENBQUNBO1FBRXpEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxLQUFLQSxTQUFTQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3RDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNsQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDckNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBO0lBQzdDQSxDQUFDQTtJQUVNRCw4QkFBU0EsR0FBaEJBLFVBQWlCQSxVQUFrQkEsRUFBRUEsTUFBY0E7UUFDbERFLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLGlCQUFlQSxVQUFZQSxDQUFDQSxDQUFDQTtRQUUxQ0EsSUFBSUEsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLElBQUlBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBRXhFQSxJQUFJQSxNQUFNQSxHQUFXQSxTQUFTQSxDQUFDQTtRQUMvQkEsSUFBSUEsT0FBT0EsR0FBV0EsU0FBU0EsQ0FBQ0E7UUFHaENBLElBQUlBLFVBQVVBLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLFVBQUNBLFVBQVVBLEVBQUVBLE1BQU1BO1lBQzNEQSxFQUFFQSxDQUFDQSxDQUFDQSxvQkFBWUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzVCQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsbUJBQVdBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO2dCQUNoQ0EsT0FBT0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDbEJBLElBQUlBO2dCQUNIQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSwyQkFBeUJBLFVBQVlBLENBQUNBLENBQUFBO1FBQ3hEQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxJQUFJQSxXQUFXQSxHQUFHQSxPQUFPQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBRW5GQSxNQUFNQSxDQUFDQTtZQUNOQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxDQUFDQTtZQUNuQ0EsTUFBTUEsRUFBRUEsV0FBV0E7WUFDbkJBLEVBQUVBLEVBQUVBLE1BQU1BO1lBQ1ZBLFNBQVNBLEVBQUVBLE9BQU9BO1NBQ2xCQSxDQUFBQTtJQUNGQSxDQUFDQTtJQUVPRiw2QkFBUUEsR0FBaEJBLFVBQWlCQSxLQUEyQkE7UUFDM0NHLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLFVBQUFBLElBQUlBLElBQUlBLE9BQUFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEtBQUtBLEVBQUVBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBL0NBLENBQStDQSxDQUFDQSxDQUFBQTtJQUMzRUEsQ0FBQ0E7SUFDRkgsaUJBQUNBO0FBQURBLENBQUNBLEFBckRELElBcURDO0FBckRZLGtCQUFVLGFBcUR0QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKi9cbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHtDb21waWxlckhvc3QsIENvbWJpbmVkT3B0aW9uc30gZnJvbSAnLi9jb21waWxlci1ob3N0JztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHtpc0phdmFTY3JpcHQsIGlzU291cmNlTWFwfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5sZXQgbG9nZ2VyID0gbmV3IExvZ2dlcih7IGRlYnVnOiBmYWxzZSB9KTtcblxuaW50ZXJmYWNlIFRyYW5zcGlsZVJlc3VsdCB7XG5cdGZhaWx1cmU6IGJvb2xlYW47XG5cdGVycm9yczogQXJyYXk8dHMuRGlhZ25vc3RpYz47XG5cdGpzOiBzdHJpbmc7XG5cdHNvdXJjZU1hcDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNwaWxlciB7XG5cdHByaXZhdGUgX2hvc3Q6IENvbXBpbGVySG9zdDtcblx0cHJpdmF0ZSBfb3B0aW9uczogQ29tYmluZWRPcHRpb25zO1xuXG5cdGNvbnN0cnVjdG9yKGhvc3Q6IENvbXBpbGVySG9zdCkge1xuXHRcdHRoaXMuX2hvc3QgPSBob3N0O1xuXG5cdFx0dGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2hvc3Qub3B0aW9ucyk7XG5cblx0XHRpZiAodGhpcy5fb3B0aW9ucy5zb3VyY2VNYXAgPT09IHVuZGVmaW5lZClcblx0XHRcdHRoaXMuX29wdGlvbnMuc291cmNlTWFwID0gdGhpcy5fb3B0aW9ucy5pbmxpbmVTb3VyY2VNYXA7XG5cblx0XHRpZiAodGhpcy5fb3B0aW9ucy5zb3VyY2VNYXAgPT09IHVuZGVmaW5lZClcblx0XHRcdHRoaXMuX29wdGlvbnMuc291cmNlTWFwID0gdHJ1ZTtcblxuXHRcdHRoaXMuX29wdGlvbnMuaW5saW5lU291cmNlTWFwID0gZmFsc2U7XG5cdFx0dGhpcy5fb3B0aW9ucy5kZWNsYXJhdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMuX29wdGlvbnMuaXNvbGF0ZWRNb2R1bGVzID0gdHJ1ZTtcblx0XHR0aGlzLl9vcHRpb25zLm1vZHVsZSA9IHRzLk1vZHVsZUtpbmQuU3lzdGVtO1xuXHR9XG5cblx0cHVibGljIHRyYW5zcGlsZShzb3VyY2VOYW1lOiBzdHJpbmcsIHNvdXJjZTogc3RyaW5nKTogVHJhbnNwaWxlUmVzdWx0IHtcblx0XHRsb2dnZXIuZGVidWcoYHRyYW5zcGlsaW5nICR7c291cmNlTmFtZX1gKTtcblxuXHRcdGxldCBzb3VyY2VGaWxlID0gdGhpcy5faG9zdC5hZGRGaWxlKHNvdXJjZU5hbWUsIHNvdXJjZSk7XG5cdFx0bGV0IHByb2dyYW0gPSB0cy5jcmVhdGVQcm9ncmFtKFtzb3VyY2VOYW1lXSwgdGhpcy5fb3B0aW9ucywgdGhpcy5faG9zdCk7XG5cblx0XHRsZXQganN0ZXh0OiBzdHJpbmcgPSB1bmRlZmluZWQ7XG5cdFx0bGV0IG1hcHRleHQ6IHN0cmluZyA9IHVuZGVmaW5lZDtcblxuXHRcdC8vIEVtaXRcblx0XHRsZXQgZW1pdFJlc3VsdCA9IHByb2dyYW0uZW1pdCh1bmRlZmluZWQsIChvdXRwdXROYW1lLCBvdXRwdXQpID0+IHtcblx0XHRcdGlmIChpc0phdmFTY3JpcHQob3V0cHV0TmFtZSkpXG5cdFx0XHRcdGpzdGV4dCA9IG91dHB1dC5zbGljZSgwLCBvdXRwdXQubGFzdEluZGV4T2YoXCIvLyNcIikpOyAvLyByZW1vdmUgc291cmNlTWFwcGluZ1VSTFxuXHRcdFx0ZWxzZSBpZiAoaXNTb3VyY2VNYXAob3V0cHV0TmFtZSkpXG5cdFx0XHRcdG1hcHRleHQgPSBvdXRwdXQ7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBvdXB1dCBmaWxlICR7b3V0cHV0TmFtZX1gKVxuXHRcdH0pO1xuXG5cdFx0bGV0IGRpYWdub3N0aWNzID0gcHJvZ3JhbS5nZXRTeW50YWN0aWNEaWFnbm9zdGljcygpLmNvbmNhdChlbWl0UmVzdWx0LmRpYWdub3N0aWNzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRmYWlsdXJlOiB0aGlzLmhhc0Vycm9yKGRpYWdub3N0aWNzKSxcblx0XHRcdGVycm9yczogZGlhZ25vc3RpY3MsXG5cdFx0XHRqczoganN0ZXh0LFxuXHRcdFx0c291cmNlTWFwOiBtYXB0ZXh0XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBoYXNFcnJvcihkaWFnczogQXJyYXk8dHMuRGlhZ25vc3RpYz4pOiBib29sZWFuIHtcblx0XHRyZXR1cm4gZGlhZ3Muc29tZShkaWFnID0+IChkaWFnLmNhdGVnb3J5ID09PSB0cy5EaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IpKVxuXHR9XG59XG4iXX0=